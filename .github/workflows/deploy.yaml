name: Deploy

on:
  workflow_dispatch:
  workflow_run:
    types:
      - completed
    workflows:
      - Release

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Get Tag
        shell: bash
        run: |
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}" \
            | jq -r '.head_branch')
          VERSION="${VERSION#v}"

          if [[ "$VERSION" =~ ^(0|[1-9]\d*)+\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-[a-zA-Z0-9_-]*)$ ]]; then
            echo "VERSION=v$VERSION" >> $GITHUB_ENV
          else
            echo "Tag 'v$VERSION' found but not matching v<SEMVER>" >&2
            echo "Falling back to auto generated docker-image-only tag..." >&2
            echo "VERSION=v$(jq -r '.version' < package.json)-$(date '+%Y%m%d%H%M%S')" >> $GITHUB_ENV
          fi

      - name: Setup Docker Buildx
        if: ${{ env.VERSION }}
        uses: docker/setup-buildx-action@v3

      - name: Build & Push
        if: ${{ env.VERSION }}
        shell: bash
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)

          docker build --tag ghcr.io/$REPO_LOWER:${{ env.VERSION }} .
          docker push ghcr.io/$REPO_LOWER:${{ env.VERSION }}
          echo "REPO_LOWER=$REPO_LOWER" >> $GITHUB_ENV

      - name: Deploy
        if: ${{ env.VERSION }}
        env:
          HELM_VALUES: ${{ secrets.HELM_VALUES }}
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        shell: bash
        run: |
          echo "$HELM_VALUES" | base64 --decode >> .deployment/helm/values.yaml
          echo "$KUBE_CONFIG" | base64 --decode >> .kube-config.yaml

          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          export KUBECONFIG="$PWD/.kube-config.yaml"
          export PATH="$PWD:$PATH"
          chmod a+x kubectl

          echo "${{ secrets.DOT_ENV }}" | base64 --decode > .deployment/helm/.env
          helm upgrade \
            velzapp .deployment/helm --install \
            --set app.image.tag="${{ env.VERSION }}" \
            --set app.image.repository="ghcr.io/${{ env.REPO_LOWER }}"
